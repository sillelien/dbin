#!/bin/bash
set -e

if ! docker-machine ls | grep default | grep Running &> /dev/null
then
    docker-machine start default  > /dev/null
fi

eval "$(docker-machine env default)"

version=0.0.4
me=`basename "$0"`

if [[ $me == "_dkr" ]]
then
    branch=dev
else
    branch=master
fi

if [[ -f /usr/local/bin/.${me} ]]
then
    sudo mv -f /usr/local/bin/.${me} /usr/local/bin/${me}
    exec /usr/local/bin/${me} $@
fi

function usage() {
echo "dkr v${version}"
cat <<'EOF'

Usage: dkr [ <command> [<args>] ]

If no arguments are supplied a dkr> prompt is started and commands can be typed directly without the dkr prefix.

Commands are:

update                          get the latest version of this script (curl must be installed)
cmp|co|compose <args>           docker-compose <args>
mac|mc|machine  <args>          docker-machine <args>
swm|sw|swarm <args>             docker-swarm  <args>
cup <args>                      docker-compose up <args>
crn|crun                        docker-compose kill; docker-compose rm; \
                		            docker-compose build && docker-compose up
it <args>                       docker run -t -i -P <args>
open <port> [<url>]             opens a browser on macs at port and url on docker default host
cln|clean                       remove all images and containers
fcn|force-clean                 remove all images and containers forcefully
bash <args>                     docker run -t -i <args> /bin/bash
bld|make [<tag>] [<dir>]        docker build -t <tag> <dir>
rn|drun                         docker run -t -i $@ this
do|build-run [<tag>] [<dir>]    docker build -t <tag> <dir> && docker run -t -i this
ex|exe                          docker exec into the last container created
fix-mac                         restart docker-machine
tag                             Tags an image with multiple repositories and/or tags
                                    Usage: dkr tag foo/bar {}:latest {}:0.1 quay.io/{}:0.1
                                    Usage: dkr tag this foo/bar quay.io/{}:0.1

help                            this info

If not recognized the arguments are passed directly to the `docker` command.
EOF
}

function bishbashbosh() {
    if (( $# == 0 ))
    then
        docker run -t -i ubuntu:14.04 /bin/bash
    else
        docker run -t -i $@ /bin/bash
    fi
}

function repl() {
	while read -p "dkr> " i
	do
        command ${i} || :
	done
}

## tag foo/bar quay.io/{}:latest {}:latest quay.io/{}:0.1 {}:0.1
## tag this foo/bar quay.io/{}:latest {}:latest quay.io/{}:0.1 {}:0.1
function tag() {
    if [[ "$1" = "this" ]]; then
        for tag in ${@:3}; do
            docker tag $1 "$(echo "$tag" | sed -e 's/{}/'"$2"'/g')"
        done
    else
        for tag in ${@:2}; do
            docker tag $1 "$(echo "$tag" | sed -e 's/{}/'"$1"'/g')"
        done
    fi
}

## bldrec . foo/bar
function build_recursive() {
    find "$1" -name "Dockerfile" | while read f; do
        docker build -t "$2-$(echo "$f" | cut -d "/" -f 2- | rev | cut -d "/" -f 2- | rev | sed -e 's/\//-/g')" "$(echo "$f" | rev | cut -d "/" -f 2- | rev)/"
    done
}


function killall() {
    if (( $# == 0 ))
    then
        containers="$(docker ps -q)" || :
    else
        containers="$(docker ps -q | grep "$1")" || :
    fi

    if [[ -n $containers ]]
    then
        docker kill $containers
    else
        echo "No containers match $1"
    fi

}

function update() {
    sudo curl -s -L https://raw.githubusercontent.com/sillelien/dkr/$branch/dkr > /usr/local/bin/.${me}
    sudo chmod 755 /usr/local/bin/.${me}
    echo "Updated $me to version: "
    exec /usr/local/bin/${me} version
}

function command() {
    case "$1" in
        cmp|co|compose) shift; docker-compose $@ ;;
        mac|mc|machine) shift; docker-machine $@ ;;
        swm|sw|swarm) shift; docker-swarm $@ ;;
        cup) shift; docker-compose up $@ ;;
        cbd|cbuild) shift; docker-compose build $@ ;;
        crn|crun) docker-compose kill; docker-compose rm; docker-compose build && docker-compose up ;;
        it) shift; docker run -t -i  $@ ;;
        opn|open) shift; open "http://$(docker-machine ip default):$1/$2" ;;
        cln|clean)  docker rmi $(docker images -q); docker rmi $(docker images -q -f dangling=true); docker rm $(docker ps -q -a) ;  docker rmi $(docker images -q);;
        fcn|force-clean)  docker rmi -f $(docker images -q); docker rmi -f $(docker images -q -f dangling=true); docker rm -f $(docker ps -q -a) ;  docker rmi -f $(docker images -q);;
        bsh|bash) shift; bishbashbosh $@ ;;
        bld|make) shift; docker build -t ${1:-this} ${2:-.} ;;
        rn|drun) shift; docker run -t -i $@ this ;;
        do|build-run) shift; docker build -t ${1:-this} ${2:-.} && docker run -t -i ${@:3} this ;;
        exe|ex|debug|dbg) shift; docker exec -it $(docker ps -q | head -n 1) bash ;;
        tag) shift; tag $@ ;;
        killall) shift; killall $@ ;;
        fix-mac) shift; docker-machine restart defaultm restart ;;
        bldrec) shift; build_recursive $@ ;;
        version) echo $version ;;
        update) update ;;
        hlp|help|usage) usage ;;
        *) docker $@ ;;
    esac
}

if (( $# == 0 ))
then
    repl
else    
    command $@
fi    
